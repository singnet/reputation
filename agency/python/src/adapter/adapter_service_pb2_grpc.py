# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import adapter_service_pb2 as adapter__service__pb2


class RatingServiceStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRatings = channel.unary_unary(
        '/adapater.RatingService/GetRatings',
        request_serializer=adapter__service__pb2.BlockInterval.SerializeToString,
        response_deserializer=adapter__service__pb2.RatingSummary.FromString,
        )


class RatingServiceServicer(object):
  """Interface exported by the server.
  """

  def GetRatings(self, request, context):
    """A simple RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RatingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRatings': grpc.unary_unary_rpc_method_handler(
          servicer.GetRatings,
          request_deserializer=adapter__service__pb2.BlockInterval.FromString,
          response_serializer=adapter__service__pb2.RatingSummary.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'adapater.RatingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
